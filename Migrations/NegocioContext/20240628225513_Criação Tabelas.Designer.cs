// <auto-generated />
using System;
using ImproveU_backend.DatabaseConfiguration.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ImproveU_backend.Migrations.NegocioContext
{
    [DbContext(typeof(ImproveuContext))]
    [Migration("20240628225513_Criação Tabelas")]
    partial class CriaçãoTabelas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ImproveU_backend.Models.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int")
                        .HasColumnName("pessoa_id");

                    b.Property<int?>("TreinoId")
                        .HasColumnType("int")
                        .HasColumnName("treino_id");

                    b.Property<DateTime?>("UltimaAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("ultima_atualizacao");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("alunos", (string)null);
                });

            modelBuilder.Entity("ImproveU_backend.Models.EdFisico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int")
                        .HasColumnName("pessoa_id");

                    b.Property<string>("RegistroConselho")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("registro_conselho");

                    b.Property<int?>("TreinoId")
                        .HasColumnType("int")
                        .HasColumnName("treino_id");

                    b.Property<DateTime?>("UltimaAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("ultima_atualizacao");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("ed_fisicos", (string)null);
                });

            modelBuilder.Entity("ImproveU_backend.Models.Exercicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<DateTime?>("UltimaAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("ultima_atualizacao");

                    b.HasKey("Id");

                    b.ToTable("exercicios", (string)null);
                });

            modelBuilder.Entity("ImproveU_backend.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int")
                        .HasColumnName("aluno_id");

                    b.Property<DateTime>("DataCriacao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Direcao")
                        .HasColumnType("int")
                        .HasColumnName("direcao");

                    b.Property<int>("EdFisicoId")
                        .HasColumnType("int")
                        .HasColumnName("ed_fisico_id");

                    b.Property<int?>("ItemTreinoId")
                        .HasColumnType("int");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("mensagem");

                    b.Property<DateTime?>("UltimaAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("ultima_atualizacao");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("EdFisicoId");

                    b.HasIndex("ItemTreinoId")
                        .IsUnique();

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("ImproveU_backend.Models.Foto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Extensão")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("extensão");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("path");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int")
                        .HasColumnName("pessoa_id");

                    b.Property<DateTime?>("UltimaAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("ultima_atualizacao");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.ToTable("fotos", (string)null);
                });

            modelBuilder.Entity("ImproveU_backend.Models.ItemTreinoARealizar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("CargaEmKg")
                        .HasColumnType("int")
                        .HasColumnName("carga");

                    b.Property<DateTime>("DataCriacao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("ExercicioId")
                        .HasColumnType("int")
                        .HasColumnName("exercicio_id");

                    b.Property<int?>("IntervaloDescanso")
                        .HasColumnType("int")
                        .HasColumnName("intervalo_descanso");

                    b.Property<int?>("Repeticoes")
                        .HasColumnType("int")
                        .HasColumnName("repeticoes");

                    b.Property<int?>("Series")
                        .HasColumnType("int")
                        .HasColumnName("series");

                    b.Property<int>("TreinoId")
                        .HasColumnType("int")
                        .HasColumnName("treino_id");

                    b.Property<DateTime?>("UltimaAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("ultima_atualizacao");

                    b.HasKey("Id");

                    b.HasIndex("ExercicioId");

                    b.HasIndex("TreinoId");

                    b.ToTable("itens_treino_realizar", (string)null);
                });

            modelBuilder.Entity("ImproveU_backend.Models.ItemTreinoRealizados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("CargaEmKg")
                        .HasColumnType("int")
                        .HasColumnName("carga");

                    b.Property<DateTime>("DataCriacao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("ExercicioId")
                        .HasColumnType("int")
                        .HasColumnName("exercicio_id");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    b.Property<int?>("IntervaloDescanso")
                        .HasColumnType("int")
                        .HasColumnName("intervalo_descanso");

                    b.Property<int?>("Repeticoes")
                        .HasColumnType("int")
                        .HasColumnName("repeticoes");

                    b.Property<int?>("Series")
                        .HasColumnType("int")
                        .HasColumnName("series");

                    b.Property<int>("TreinoId")
                        .HasColumnType("int")
                        .HasColumnName("treino_id");

                    b.Property<DateTime?>("UltimaAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("ultima_atualizacao");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExercicioId");

                    b.HasIndex("TreinoId");

                    b.ToTable("itens_treino_realizado", (string)null);
                });

            modelBuilder.Entity("ImproveU_backend.Models.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataCriacao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("identity_user_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.Property<DateTime?>("UltimaAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("ultima_atualizacao");

                    b.HasKey("Id");

                    b.ToTable("pessoas", (string)null);
                });

            modelBuilder.Entity("ImproveU_backend.Models.Treino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int")
                        .HasColumnName("aluno_id");

                    b.Property<DateTime>("DataCriacao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("data_criacao")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly?>("DataFimVigencia")
                        .HasColumnType("DATE")
                        .HasColumnName("data_fim_vigencia");

                    b.Property<DateOnly?>("DataInicioVigencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasColumnName("data_inicio_vigencia")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("EdFisicoId")
                        .HasColumnType("int")
                        .HasColumnName("ed_fisico_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UltimaAlteracao")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("ultima_atualizacao");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("EdFisicoId");

                    b.ToTable("treinos", (string)null);
                });

            modelBuilder.Entity("ImproveU_backend.Models.Aluno", b =>
                {
                    b.HasOne("ImproveU_backend.Models.Pessoa", "Pessoa")
                        .WithOne("Aluno")
                        .HasForeignKey("ImproveU_backend.Models.Aluno", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("ImproveU_backend.Models.EdFisico", b =>
                {
                    b.HasOne("ImproveU_backend.Models.Pessoa", "Pessoa")
                        .WithOne("EdFisico")
                        .HasForeignKey("ImproveU_backend.Models.EdFisico", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("ImproveU_backend.Models.Feedback", b =>
                {
                    b.HasOne("ImproveU_backend.Models.Aluno", "Aluno")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImproveU_backend.Models.EdFisico", "EdFisico")
                        .WithMany("Feedbacks")
                        .HasForeignKey("EdFisicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImproveU_backend.Models.ItemTreinoRealizados", "ItemTreinoRealizado")
                        .WithOne("Feedback")
                        .HasForeignKey("ImproveU_backend.Models.Feedback", "ItemTreinoId");

                    b.Navigation("Aluno");

                    b.Navigation("EdFisico");

                    b.Navigation("ItemTreinoRealizado");
                });

            modelBuilder.Entity("ImproveU_backend.Models.Foto", b =>
                {
                    b.HasOne("ImproveU_backend.Models.Pessoa", "Pessoa")
                        .WithMany("Fotos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("ImproveU_backend.Models.ItemTreinoARealizar", b =>
                {
                    b.HasOne("ImproveU_backend.Models.Exercicio", "ExercicioARealizar")
                        .WithMany("ItensTreino")
                        .HasForeignKey("ExercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImproveU_backend.Models.Treino", "Treino")
                        .WithMany("ItensTreinoARealizar")
                        .HasForeignKey("TreinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExercicioARealizar");

                    b.Navigation("Treino");
                });

            modelBuilder.Entity("ImproveU_backend.Models.ItemTreinoRealizados", b =>
                {
                    b.HasOne("ImproveU_backend.Models.Exercicio", "ExercicioRealizado")
                        .WithMany()
                        .HasForeignKey("ExercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImproveU_backend.Models.Treino", "Treino")
                        .WithMany("ItensTreinoRealizados")
                        .HasForeignKey("TreinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExercicioRealizado");

                    b.Navigation("Treino");
                });

            modelBuilder.Entity("ImproveU_backend.Models.Treino", b =>
                {
                    b.HasOne("ImproveU_backend.Models.Aluno", "Aluno")
                        .WithMany("Treinos")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImproveU_backend.Models.EdFisico", "EdFisico")
                        .WithMany("Treinos")
                        .HasForeignKey("EdFisicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("EdFisico");
                });

            modelBuilder.Entity("ImproveU_backend.Models.Aluno", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Treinos");
                });

            modelBuilder.Entity("ImproveU_backend.Models.EdFisico", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Treinos");
                });

            modelBuilder.Entity("ImproveU_backend.Models.Exercicio", b =>
                {
                    b.Navigation("ItensTreino");
                });

            modelBuilder.Entity("ImproveU_backend.Models.ItemTreinoRealizados", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();
                });

            modelBuilder.Entity("ImproveU_backend.Models.Pessoa", b =>
                {
                    b.Navigation("Aluno");

                    b.Navigation("EdFisico")
                        .IsRequired();

                    b.Navigation("Fotos");
                });

            modelBuilder.Entity("ImproveU_backend.Models.Treino", b =>
                {
                    b.Navigation("ItensTreinoARealizar");

                    b.Navigation("ItensTreinoRealizados");
                });
#pragma warning restore 612, 618
        }
    }
}
